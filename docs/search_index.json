[["index.html", "空間統計 簡介", " 空間統計 延畢菸酒生 2021-05-01 簡介 《空間分析–方法與應用（Spatial Analysis Methods and Applications）》 （溫在弘 教授）的讀書筆記，再加上一點的Rcode。 。 某個跨界菸酒生 "],["author.html", "筆記", " 筆記 只是作些筆記 "],["intro.html", "第 1 章 空間思考 1.1 實體地理空間 1.2 地理空間分析 1.3 注意空間資料的陷阱", " 第 1 章 空間思考 1.1 實體地理空間 1.1.1 地理資料模型 1.1.1.1 地理資料模型（geographical data model） 透過電腦來處理實體地理空間，主要分為兩類： 向量資料（vector data） 以點、線、面來處理地理資料。 點：代表地標或者事件發生地點，如商店、學校、竊盜發生地點等等。 線：據線性特徵的事物，如：水文、生物遷徙。 面：獨立且分散，如行政邊界。 網格資料（raster data） 將空間分為許多大小相同的網格，然後在往格中紀錄資料，例如溫度、風速等等，需要的記憶體遠大於向量。 (#fig:vector&amp;raste)vector&amp;raster 圖案來自：Keep Environment Nature’s Blog (https://blog.xuite.net/lwkntu/blog/507588534) 1.1.1.2 物件與場(object &amp; field) 除了客觀的資料，O’Sullivan 與 Unwin 於2010年提出應該加上物件(object)與場域(field)的觀點。 物件 將世界視為一個實體，不再只是一張地圖，大物件中可以含小物件，地如行政區中有學校與公園等等，其中又將物件賦予時間或行為的屬性，例如：南投線的人口流失變化。 場域 網格與向量兩個加起來的進階版，世界是一個連續的表面，存在著不同的數值。例如：海平面高度。而網格只是格子，但場域觀點下以三角形為單位，就是傳說中的「不規則三角形」（triangulated irregular network, TIN），其中包含不同大小與邊長的三角形，適合地理現象複雜的地方，用三角形的方式儲存資料可以減少儲存空間。 (#fig:TIN )TIN不規則三角形示意圖 圖片取自：https://www.osgeo.cn/post/15f1a 但是不只這些，大家都可以發揮想像力去使用不同的地圖表現方式。 1.1.2 屬性資料與測量尺度 名目資料（nomial） 次序資料（ordinal） 區間資料（interval） 比例資料（ratio） 1.2 地理空間分析 1.2.1 距離 大部分都是使用歐式距離： \\[ d_{ij} = \\sqrt{(x_i-x_j)^2+(y_i-y_j)^2} \\] 但是距離這方面還是會受到現實面的影響，例如：交通便利性、金錢等等。 1.2.2 鄰近性 以二元（0,1）的方式定義兩物之間的關係，定義其實可以隨人喜歡，可以以實際的距離（台北與桃園為鄰近，台北與高雄不為鄰近）；也可以以有無航線定義，例如松山與桃園機場沒有直飛，因此定義為不鄰近，但是曼谷與桃園有直飛，定義為鄰近（好想出國玩喔！）。 以下有一些較經典（a.k.a 簡單）的定義方式： Rook Contiguity: 邊界，但是沒有斜對角（角角）。 Bishop Contiguity: 對角線(角角)而已喔！ Queen Contiguity: Rook+Bishop (#fig:Rook,Bishop,Queen )Contiguity 圖片取自：https://spatiolog.blogspot.com/2019/01/contiguity-based-spatial-weights-matrix.html 1.2.3 矩陣 1.2.3.1 距離矩陣 ## 1 2 3 4 ## 1 0.00 1.41 1.58 2.24 ## 2 1.41 0.00 0.71 2.24 ## 3 1.58 0.71 0.00 1.58 ## 4 2.24 2.24 1.58 0.00 D 為距離矩陣，例如：1到2的距離為1.41、1到3的距離為1.58、1到4的距離為2.24，該矩陣為對稱矩陣。 1.2.3.2 鄰近矩陣 ## 1 2 3 4 ## 1 * 1 1 0 ## 2 1 * 1 0 ## 3 1 1 * 1 ## 4 0 0 1 * 以上矩陣為距離2以內為鄰近，一樣為對稱矩陣 1.2.3.3 鄰近矩陣 ## 1 2 3 4 ## 1 * 1 1 0 ## 2 1 * 1 0 ## 3 0 1 * 0 ## 4 0 0 1 * 該鄰近矩陣表示，距離最近的2個點為鄰近，這個矩陣就不是對稱矩陣。 1.2.3.4 權重矩陣 ## 1 2 3 4 列總和 ## 1 Inf 0.71 0.63 0.45 1.79 ## 2 0.71 Inf 1.41 0.45 2.57 ## 3 0.63 1.41 Inf 0.63 2.68 ## 4 0.45 0.45 0.63 Inf 1.53 權重矩陣為距離的倒數。 調整後的權重矩陣 ## 1 2 3 4 列總和 ## 1 Inf 0.40 0.35 0.25 1.00 ## 2 0.28 Inf 0.55 0.17 1.00 ## 3 0.24 0.53 Inf 0.24 1.01 ## 4 0.29 0.29 0.41 Inf 0.99 調整後的權重矩陣列總和為1。 1.2.4 鄰近多邊形 鄰近多邊形(proximity polygons) 通常稱之為徐昇式多邊形(Thiessen polygons)，利用中垂線的方式劃出多邊形，在多邊形內的每個點距離該物體的距離最近。 (#fig:Thiessen polygones )Contiguity 圖片取自：https://blog.xuite.net/a25701161/blog/64627085-GIS 1.2.5 空間交互作用(spatial interaction) 地理學第一定律，相鄰事物具有相似性，距離遠的事物相異(越進關係越大)。因此空間交互作用會用下列作為權重： \\[ w_{ij} \\propto \\frac{1}{d^k} \\] \\(w_{ij}\\)為\\(i、j\\) 兩地的交互作用程度，\\(d\\)為兩地距離，\\(k\\)為依據離遞減的係數。表示距離越遠，交互作用越小。也可改寫為： \\[ w_{ij} \\propto \\frac{P_iP_j}{d^k} \\] 其中\\(P_i、P_j\\)為兩地的屬性質，例如：就業率、人口密度等等。 引力模型(Gravity Model)(又稱霍夫模型(Huff Model))為以上的延伸概念，是一種空間互動模式，模型如下： \\[ P_{ij} = \\frac{A^{\\alpha}_j \\times D^{-\\beta}_{ij}}{\\sum^n_{j =1}A^{\\alpha}_j \\times D^{-\\beta}_{ij}} \\] - \\(P_{ij}\\): \\(i\\)地的人到\\(j\\)地商店消費的機率 - \\(A_j\\): \\(j\\)地商店的吸引力 - \\(D_{ij}}\\): \\(i、j\\)兩地距離 - \\(\\alpha、\\beta\\): 實證觀察的係數 1.2.6 空間自相關(spatial autocorrelation) 也稱為空間相依(spatial dependency)，\\(i\\)地的觀察值會與\\(i\\)地周圍的觀察值有關，距離越遠相關程度越低，且為造成空間變異(spatial variance)的主要原因之一，例如：一個地區的犯罪率高，會造成鄰近的周圍地區的犯罪率也高。 1.3 注意空間資料的陷阱 1.3.1 地理尺度 可調整面積單元問題(the modifiable areal unit problem, MAUP)即在不同的劃分下，最小的研究單元不同，例如：台灣最小的行政單位為鄰；日本最小的行政單位為町。地理研究可能是很多最小單位的集合，所以不同的集合(或說是畫分)方式就會有不同的結果。通常主要是兩種問題：加總效應(aggregation effect)導致的分區問題；以及空間尺度效應(scale effect) 造成的最小空間尺度問題。 分區問題 不同區域劃分影響觀察值的加總， 來源：https://www.gislounge.com/modifiable-areal-unit-problem-gis/ 最小空間尺度問題 因為定義不同的最小單位，而導致事件分佈看起來不同。 來源：https://gisgeography.com/maup-modifiable-areal-unit-problem/ 1.3.2 空間不均與邊緣效應 空間本來就會因為其特質有分布不均的現象，尤其是人文環境與地理分析，例如：銀行搶案集中在人口、銀行較集中的區域，造成群聚的原因就是反映了空間不均。 空間不均衍生了邊緣效應(edge effect)，因為研究區域的選定為人為，一定會有些區域位於邊緣，只有半邊的鄰居，研究區域外的鄰居就被忽略，這個問題要小心面對。 "],["wind.html", "第 2 章 R_讀取shp檔+畫地圖 2.1 找中心點：st_centroid() 2.2 輸出座標：st_coordinates() 2.3 簡單的統計地圖 2.4 2021世界人口變化百分比 2.5 擷取一部分地圖", " 第 2 章 R_讀取shp檔+畫地圖 shp檔其實是由數個檔形成的向量地理圖資，包含：.shp, .shx, .dbf （前三個必需要有）及 .prj等一系列「相同名稱」、「不同副檔名」組成的地理資訊。(https://bookdown.org/tpemartin/108-1-ntpu-datavisualization/annotation-and-maps.html#%E8%AE%80%E5%85%A5shp%E6%AA%94) # 取出spData套件附的world data data(world,package=&quot;spData&quot;) class(world) # 已是sf object ## [1] &quot;sf&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; 查看目前的CRS(地圖的投影法，也稱之為座標參考系統)： world %&gt;% st_crs ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, ## AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] world_plot &lt;- world %&gt;% st_geometry() %&gt;% ggplot() world_plot+geom_sf() 更換CRS： world %&gt;% st_transform(crs=&quot;+proj=laea +y_0=0 +lon_0=155 +lat_0=-90 +ellps=WGS84 +no_defs&quot;) -&gt; world_proj world_proj %&gt;% ggplot()+geom_sf() 2.1 找中心點：st_centroid() 找polygon中心點 形成新的sf object，有相同data frame但geometry column只是中心點的point geometry. -如果一筆feature資料有多個中心點，可以設定： st_centroid(..., of_largest_polygon = T) load(url(&quot;https://www.dropbox.com/s/elnvocol0nnkcc9/sf_northTaiwan.Rda?dl=1&quot;)) sf_northTaiwan %&gt;% st_centroid(of_largest_polygon = T) -&gt; sf_centroid_northTaiwan sf_centroid_northTaiwan ## Simple feature collection with 3 features and 4 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: 121.6 ymin: 24.99 xmax: 121.7 ymax: 25.12 ## Geodetic CRS: TWD97 ## # A tibble: 3 x 5 ## COUNTYID COUNTYCODE COUNTYNAME COUNTYENG ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 C 10017 基隆市 Keelung City ## 2 A 63000 臺北市 Taipei City ## 3 F 65000 新北市 New Taipei City ## # ... with 1 more variable: ## # geometry &lt;POINT [arc_degree]&gt; 2.2 輸出座標：st_coordinates() 找出中心點通常是要為圖加上新的圖層(geom_point layer)，還會再進行geom_point layer data frame架構： sf_centroid_northTaiwan %&gt;% st_coordinates() -&gt; coord_centroid_northTaiwan # 取出中心點座標 coord_centroid_northTaiwan ## X Y ## 1 121.7 25.12 ## 2 121.6 25.08 ## 3 121.6 24.99 sf_northTaiwan$x_centroid &lt;- coord_centroid_northTaiwan[,&quot;X&quot;] sf_northTaiwan$y_centroid &lt;- coord_centroid_northTaiwan[,&quot;Y&quot;] sf_northTaiwan %&gt;% ggplot()+ geom_sf()+ geom_point( aes( x=x_centroid,y=y_centroid, shape=COUNTYNAME, color=COUNTYNAME ), size=2 ) - 由 https://data.gov.tw/dataset/7442 引入台灣直轄市、縣市界線圖資存在名為sf_taiwan的物件。 增加文字：geom_sf_text(),geom_sf_label() sf_taiwan=read_sf(&quot;sf_taiwan\\\\sf_taiwan.shp&quot;) sf_taiwan_simplify &lt;- sf_taiwan %&gt;% rmapshaper::ms_simplify() # 幾何簡化(畫比較快) sf_taiwan_simplify %&gt;% st_crop( xmin=119, xmax=123, ymin=21, ymax=26 ) %&gt;% ggplot()+geom_sf()+ geom_sf_text( aes(label=COUNTYNAME) ) 2.3 簡單的統計地圖 可以自己找些關於台灣的資料，現在我找的是台灣稻米產量。 Rice &lt;- read.csv(&quot;Rice.csv&quot; , encoding=&#39;BIG5&#39;) Rice &lt;- Rice[,c(2,4)] colnames(Rice) &lt;- c(&quot;COUNTYNAME&quot;, &quot;AREA&quot;) Rice$COUNTYNAME &lt;- c(&quot;台中市&quot;, &quot;台東縣&quot;,&quot;台南市&quot;,&quot;宜蘭縣&quot;,&quot;花蓮縣&quot;,&quot;南投縣&quot;,&quot;屏東縣&quot; ,&quot;苗栗縣&quot;,&quot;桃園市&quot;,&quot;高雄市&quot;,&quot;雲林縣&quot;,&quot;新北市&quot;,&quot;新竹市&quot;,&quot;新竹縣&quot;,&quot;嘉義市&quot;,&quot;嘉義縣&quot;,&quot;彰化縣&quot;) sf_taiwan.new &lt;- left_join(sf_taiwan, Rice, by = &quot;COUNTYNAME&quot;) sf_taiwan.new_simplify &lt;- sf_taiwan.new %&gt;% rmapshaper::ms_simplify() sf_taiwan.new_simplify%&gt;% st_crop( xmin=119, xmax=123, ymin=21, ymax=26 ) %&gt;% ggplot()+ geom_sf(size = 0.2, aes(fill =AREA ))+ scale_fill_gradient(low = &quot;#56B1F7&quot;, high = &quot;#132B43&quot;, na.value = NA)+ theme_bw() 2.4 2021世界人口變化百分比 資料來來自於：https://www.worldometers.info/world-population/population-by-country/ world_population &lt;- read.csv(&quot;2021 World Population.csv&quot;) world_population.1 &lt;- world_population[,c(1,3)] colnames(world_population.1) &lt;-c(colnames(world)[2],&quot;YearlyChange.per&quot;) world.01 &lt;- left_join(world, world_population.1) world.01 %&gt;% ggplot()+geom_sf(size = 0.2, aes(fill = YearlyChange.per))+ scale_fill_gradient(low = &quot;#ffffff&quot;, high = &quot;#17184b&quot;, na.value = NA)+ theme_bw() 2.5 擷取一部分地圖 world %&gt;% filter( region_un==&quot;Asia&quot; ) %&gt;% ggplot()+geom_sf()+ geom_sf_text( aes(label=name_long) ) 資料與code來自： https://bookdown.org/tpemartin/108-1-ntpu-datavisualization/ 很推薦這個網站，教學仔細，還有許多資料可以練習，真的是讚讚！ "],["點事件的空間型態.html", "第 3 章 點事件的空間型態 3.1 空間型態分析之前的準備動作 3.2 空間分布的中心趨勢 3.3 空間分布的分散程度", " 第 3 章 點事件的空間型態 3.1 空間型態分析之前的準備動作 點事件發生地點(雨量、震央、犯罪地點等)通常必須要一組x-y的座標對應，稱為地址對位(address matching)，畫下座標可以了解事件分布型態。 3.2 空間分布的中心趨勢 空間分布的中心趨勢有三種不同的指標可以描述：平均中心點(mean center)、中位數中心點(median center)、中心地理物件(central feature) 3.2.1 平均中心點 簡單而言，就是平均(\\(\\mu\\))的概念： \\[ \\begin{align} \\bar{x} = \\frac{1}{n}\\sum_{i=1}^nx_i \\\\ \\bar{y} = \\frac{1}{n}\\sum_{i=1}^ny_i \\end{align} \\] 若事件具有權重的概念，例如：醫院的病床數或者是在學人數等，可以再加上加權(\\(w\\))的概念： \\[ \\begin{align} \\bar{x} = \\frac{\\sum_{i=1}^n(w_ix_i)}{\\sum_{i=1}^nw_i} \\\\ \\bar{y} = \\frac{\\sum_{i=1}^n(w_iy_i)}{\\sum_{i=1}^nw_i} \\end{align} \\] 要小心的事，一般來說，這個平均值(\\(\\bar{x}\\),\\(\\bar{y}\\))並不是事件的發生地，而且通常無法表示任何群聚點。 3.2.2 中位數中心點 當想找出商店的最佳設置點時，可以計算中位數中心點，表示該點距離所有地物的距離總和最小，以常理來說最容易到達。一般來說距離為直線距離，因此公式如下： \\[ \\begin{align} Minimize\\ \\sum_id_i^t = \\sum_i\\sqrt{(x_i-x^t)^2+(y_i-y^t)^2} \\end{align} \\] 其中\\(d_i^t\\)為\\(i\\)點到中位數中心點的距離；\\(x^t、y^t\\)為中位數中心點，並不是事件發生的點。 當然直線距離也是可以使用其他概念代替，例如：旅行成本(時間加上移動成本)等等。 3.2.3 中心地理物件 中心地理物件代表在該群體中，距離其他物件總和距離最小的物件。例如：想要在高雄市的某一間學校舉辦邀請各學校來參加的活動，在沒有其他任何條件限制下想要選一個距離所有學校最近的那間學校，該學校即為中心地理物件。 3.3 空間分布的分散程度 3.3.1 標準距離 標準距離(standard deviation)，又稱標準距離偏差(standard distance deviation)這個和標準差有相似的概念，就是看資料與資料平均點的距離有多近，標準差越小就是越集中，越大就是越分散，公式為： \\[ SD = \\sqrt{\\frac{\\sum_i(x_i-\\bar{x})^2}{n}+\\frac{\\sum_i(y_i-\\bar{y})^2}{n}} \\] 最後以平均中心點為圓心，以\\(SD\\)為半徑畫一個圓，即可畫出一個圓，圓越小表示事件分布越集中。 若加上權重的概念，就可以將以上的公式改寫成： \\[ SD_w = \\sqrt{\\frac{\\sum_iw_i(x_i-\\bar{x})^2}{\\sum_iw_i}+\\frac{\\sum_iw_i(y_i-\\bar{y})^2}{\\sum_iw_i}} \\] 3.3.2 標準差橢圓 若事件的群聚具有方向性，例如台灣本島是長長的一根地瓜，主要都是南北分布，因此標準差可以改為標準差橢圓(standard deviational ellipse)(上為原始，下為加入權重)： \\[ \\begin{gather*} SD_x = \\sqrt{\\frac{\\sum_i(x_i-\\bar{x})^2}{n}}\\ ; \\ SD_y = \\sqrt{\\frac{\\sum_i(y_i-\\bar{y})^2}{n}}\\\\\\\\ SD_{wx} = \\sqrt{\\frac{\\sum_iw_i(x_i-\\bar{x})^2}{\\sum_iw_i}}\\ ; \\ SD_{wy} = \\sqrt{\\frac{\\sum_iw_i(y_i-\\bar{y})^2}{\\sum_iw_i}} \\end{gather*} \\] 上面是東西(\\(x\\)軸)與南北(\\(y\\)軸)的標準距離，若要計算地物方向，要先計算所有地物與\\(y\\)的距離，再將\\(y\\)軸旋轉一點角度然後再計算一次與\\(y\\)的距離，直到找到距離最小的那個方向為止，紀錄此時\\(y\\)軸的旋轉角度，並將\\(x\\)也一起旋轉(就是讓兩軸依舊保持直角)，就是該物件分布的角度。 方向性可以看出事件分布的型態，例如犯罪率是否會與主要幹道的方向相同等等。 "],["r-實作-02.html", "第 4 章 R 實作 02 4.1 台灣旅館數量 4.2 中心點 4.3 橢圓 4.4 plot the ellipse", " 第 4 章 R 實作 02 4.1 台灣旅館數量 library(tidyverse) sf_taiwan &lt;- sf::read_sf(&quot;sf_taiwan\\\\sf_taiwan.shp&quot;) sf_taiwan_simplify &lt;- sf_taiwan %&gt;% rmapshaper::ms_simplify() # 簡化圖形 sf_hotel &lt;-sf::read_sf(&quot;Hotel_E_f\\\\Hotel_E_f.shp&quot;) sf_taiwan_simplify %&gt;% sf::st_crop( xmin=119, xmax=123, ymin=21, ymax=26 ) %&gt;% ggplot()+ # 第一層是sf_taiwan, 以它的CRS為主 geom_sf()+ geom_sf(data=sf_hotel, size = 0.1, color= &quot;#8f2e14&quot;, alpha = 0.5) + theme(panel.background = element_rect(fill=&#39;#c1e4e9&#39;), panel.grid.major=element_line(colour=NA)) ## although coordinates are longitude/latitude, st_intersection assumes that they are planar ## Warning: attribute variables are assumed to be ## spatially constant throughout all geometries 4.2 中心點 以台南市為例 畫圖： library(aspace) library(sf) sf_Tainan &lt;- sf_taiwan %&gt;% subset(COUNTYNAME == &quot;臺南市&quot;) sf_hotel_Tainan &lt;- (sf_hotel %&gt;% subset(Region == &quot;Tainan City&quot;)) Tainana.hetol.plot &lt;- sf_Tainan %&gt;% st_crop( xmin=118, xmax=121, ymin=22, ymax=24 ) %&gt;% ggplot()+ # 第一層是sf_taiwan, 以它的CRS為主 geom_sf()+ geom_sf(data=sf_hotel_Tainan, size = 1, color= &quot;#7b8d42&quot;, alpha= 0.5) + theme(panel.background = element_rect(fill=&#39;#c1e4e9&#39;), panel.grid.major=element_line(colour=NA)) Tainana.hetol.plot 整理資料： 4.2.1 mean center mean_c &lt;- mean_centre(id=1, filename=&quot;sf_hotel_Tainan&quot;, weighted=FALSE, weights=NULL, points=sf_hotel_Tainan.xy) ## id CENTRE.x CENTRE.y ## 1 1 120.2 23.06 4.2.2 median center median_c &lt;- median_centre(id=1, filename=&quot;sf_hotel_Tainan&quot;, points=sf_hotel_Tainan.xy) ## id median.x median.y ## 1 1 120.2 23 4.2.3 mean center CF &lt;- CF(id=1, filename=&quot;sf_hotel_Tainan&quot;, points=sf_hotel_Tainan.xy) ## id CF.x CF.y ## 1 1 120.2 23 另外還有一個是課本裡沒提到的： - Centre of Minimum Distance # CMD(id=1, filename=&quot;sf_hotel_Tainan&quot;, dist=10, # points=sf_hotel_Tainan.xy) 4.2.4 比較三個中心點： Tainana.hetol.plot +geom_point(mapping = aes(x = CF$CF.x, y = CF$CF.y), shape = 11, color = &quot;#483c4d&quot;, size = 3, alpha = 0.8)+ geom_point(mapping = aes(x = mean_c$CENTRE.x, y = mean_c$CENTRE.y))+ geom_point(mapping = aes(x = median_c$median.x, y = median_c$median.y), shape = 1, color = &quot;#420a00&quot;, size = 3, alpha = 0.7)+ labs(x = &quot;&quot;, y = &quot;&quot;) 4.3 橢圓 calc_sde(id=1,points=sf_hotel_Tainan.xy) ## $id ## [1] 1 ## ## $CALCCENTRE ## [1] TRUE ## ## $weighted ## [1] FALSE ## ## $CENTRE.x ## [1] 120.2 ## ## $CENTRE.y ## [1] 23.06 ## ## $Sigma.x ## [1] 0.07564 ## ## $Sigma.y ## [1] 0.2038 ## ## $Major ## [1] &quot;SigmaY&quot; ## ## $Minor ## [1] &quot;SigmaX&quot; ## ## $Theta ## [1] 38.74 ## ## $Eccentricity ## [1] 0.9286 ## ## $Area.sde ## [1] 0.04844 ## ## $TanTheta ## [1] 0.8022 ## ## $SinTheta ## [1] 0.6257 ## ## $CosTheta ## [1] 0.78 ## ## $SinThetaCosTheta ## [1] 0.4881 ## ## $Sin2Theta ## [1] 0.3915 ## ## $Cos2Theta ## [1] 0.6085 ## ## $ThetaCorr ## [1] 38.74 4.4 plot the ellipse rotation = function(a){ r = a * pi / 180 #degrees to radians matrix(c(cos(r), sin(r), -sin(r), cos(r)), nrow = 2, ncol = 2) %&gt;% return() } # 旋轉矩陣(Rotation matrix) CENTRE.x &lt;- mean(sf_hotel_Tainan.xy$Px); CENTRE.y &lt;- mean(sf_hotel_Tainan.xy$Py) # 圓心，就是平均 Sigma.x = 0.07563829; Sigma.y = 0.2038352 # 半徑 theta &lt;- 38.73579* pi / 180 t &lt;- rotation(theta) library(ggforce) ## Warning: package &#39;ggforce&#39; was built under R version ## 4.0.5 Tainana.hetol.plot+ geom_point(mapping = aes(x = CENTRE.x, y = CENTRE.y))+ geom_abline(intercept = CENTRE.y-CENTRE.x*tan(theta), slope = tan(theta))+ geom_abline(intercept = CENTRE.y+CENTRE.x*(tan(theta)), slope = -tan(theta))+ geom_ellipse(aes(x0 = CENTRE.x, y0 = CENTRE.y, a = Sigma.y, b = Sigma.x, angle = theta)) ## Warning: range backtransformation not implemented in ## this coord; results may be wrong. ## Warning: range backtransformation not implemented in ## this coord; results may be wrong. 資料來源： https://data.gov.tw/dataset/73280 https://rstudio-pubs-static.s3.amazonaws.com/202534_2c5edc19016247ac9ecfc5713b4604f2.html "],["sound.html", "A 余音绕梁", " A 余音绕梁 呐，到这里朕的书差不多写完了，但还有几句话要交待，所以开个附录，再啰嗦几句，各位客官稍安勿躁、扶稳坐好。 "],["references.html", "統蕉恅瓬", " 統蕉恅瓬 sf 套件介紹 https://r-spatial.github.io/sf/articles/sf1.html 用R畫地圖： https://medium.com/dennis-r-data-news/election-results-visualization-with-ggplot2-7db8ec700925 經濟資料視覺化： https://bookdown.org/tpemartin/108-1-ntpu-datavisualization/annotation-and-maps.html#%E5%B8%B8%E8%A6%8B%E5%9C%96%E8%B3%87%E9%81%8B%E7%AE%97 台灣 GIS 資料來源： https://blog.abysm.org/2016/04/taiwan-gis-resources/ "]]
